let x (* x1 *) =                                      (* x1 = [1;3;2;2;3;2;2] *)
  let f x(* x2 *) y(* y2 *) =                         (* x2 = 1, y2 = 2 *)
    let x(* x3 *) = 2 * x(* x2 *) in                  (* x3 = 2 *)
    let y(* y4 *) = y(* y2 *) ::[x(* x3 *) ] in       (* y4 = [2;2] *)
    let y(* y5 *) x(* x5 *) =                         (* x5 = 3, y5 = fun x -> ... *)
      let y(* y6 *) = x(* x5 *) ::y(* y4 *) in        (* y6 = [3;2;2] *)
      y(* y6 *) @ y(* y6 *)                           (* [3;2;2;3;2;2] *)
      in
      let x(* x8 *) = y(* y5 *) 3 in                  (* x8 = [3;2;2;3;2;2] *)
      1::x(* x8 *)                                    (* [1;3;2;2;3;2;2] *)
  in
  f 1 2                                               (* [1;3;2;2;3;2;2] *)